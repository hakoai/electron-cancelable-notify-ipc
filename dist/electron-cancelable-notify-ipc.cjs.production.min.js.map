{"version":3,"file":"electron-cancelable-notify-ipc.cjs.production.min.js","sources":["../src/lib/main.ts","../src/lib/index.ts","../src/lib/renderer.ts","../src/index.ts"],"sourcesContent":["import { IpcMain } from 'electron';\nimport { IpcMainEvent } from 'electron/main';\nimport { Channels } from '.';\n\nexport function makeIpcMainFunctions(ipcMain: IpcMain) {\n  function handle(\n    channel: string,\n    listener: (\n      event: IpcMainEvent,\n      notify: (...args: unknown[]) => void,\n      cancel: Promise<unknown>,\n      ...args: unknown[]\n    ) => Promise<unknown[]>\n  ): void {\n    ipcMain.removeAllListeners(channel);\n    ipcMain.on(channel, (event, channels: Channels, ...args) => {\n      event.sender.send(channels.act);\n      const calcelPromise = new Promise(resolve => {\n        ipcMain.once(channels.cancel, (_, args) => {\n          resolve(args);\n        });\n      });\n      listener(\n        event,\n        (...args) => {\n          event.sender.send(channels.notify, ...args);\n        },\n        calcelPromise,\n        ...args\n      )\n        .then(res => {\n          event.sender.send(channels.responce, ...res);\n        })\n        .finally(() => {\n          ipcMain.removeAllListeners(channels.cancel);\n        });\n    });\n  }\n\n  function removeAllListeners(channel: string) {\n    ipcMain.removeAllListeners(channel);\n  }\n\n  return { handle, removeAllListeners };\n}\n","import { v1 } from 'uuid';\nexport interface Channels {\n  act: string;\n  notify: string;\n  cancel: string;\n  responce: string;\n}\n\nexport function makeChannel(channel: string): Channels {\n  const base = `${channel}-${v1()}`;\n  return {\n    act: `${base}-act`,\n    notify: `${base}-notify`,\n    cancel: `${base}-cancel`,\n    responce: `${base}-responce`,\n  };\n}\n","import { IpcRenderer } from 'electron';\nimport { makeChannel } from '.';\n\nexport function makeIpcRendererFunctions(ipcRenderer: IpcRenderer) {\n  function invokeWithTimeOut(\n    channel: string,\n    onNotify: (...args: unknown[]) => void,\n    timeout: number,\n    ...args: unknown[]\n  ): [(...args: unknown[]) => void, Promise<unknown[]>] {\n    const channels = makeChannel(channel);\n    return [\n      (...args: unknown[]) => {\n        ipcRenderer.send(channels.cancel, ...args);\n      },\n      new Promise((resolve, reject) => {\n        let act = false;\n        let done = false;\n\n        ipcRenderer.once(channels.act, () => (act = true));\n        ipcRenderer.on(channels.notify, (_, ...args) => {\n          onNotify(...args);\n        });\n        ipcRenderer.once(channels.responce, (_, ...args) => {\n          if (!done) {\n            done = true;\n            ipcRenderer.removeAllListeners(channels.act);\n            ipcRenderer.removeAllListeners(channels.notify);\n            resolve(args);\n          }\n        });\n\n        setTimeout(() => {\n          if (!act && !done) {\n            done = true;\n            ipcRenderer.removeAllListeners(channels.act);\n            ipcRenderer.removeAllListeners(channels.notify);\n            ipcRenderer.removeAllListeners(channels.responce);\n            reject(new Error('ipc timeout.'));\n          }\n        }, timeout);\n\n        ipcRenderer.send(channel, channels, ...args);\n      }),\n    ];\n  }\n\n  function invoke(\n    channel: string,\n    onNotify: (...args: unknown[]) => void,\n    ...args: unknown[]\n  ) {\n    return invokeWithTimeOut(channel, onNotify, 1000, ...args);\n  }\n\n  return { invokeWithTimeOut, invoke };\n}\n","import { makeIpcMainFunctions } from './lib/main';\nimport * as electron from 'electron';\nimport { makeIpcRendererFunctions } from './lib/renderer';\n\nexport const ipcMain = makeIpcMainFunctions(electron.ipcMain);\n\nexport const ipcRenderer = makeIpcRendererFunctions(electron.ipcRenderer);\n"],"names":["makeIpcMainFunctions","ipcMain","handle","channel","listener","removeAllListeners","on","event","channels","sender","send","act","calcelPromise","Promise","resolve","once","cancel","_","args","notify","then","res","responce","makeChannel","base","v1","makeIpcRendererFunctions","ipcRenderer","invokeWithTimeOut","onNotify","timeout","reject","done","setTimeout","Error","invoke","electron"],"mappings":"yHAIgBA,EAAqBC,SAuC5B,CAAEC,gBArCPC,EACAC,GAOAH,EAAQI,mBAAmBF,GAC3BF,EAAQK,GAAGH,GAAS,SAACI,EAAOC,GAC1BD,EAAME,OAAOC,KAAKF,EAASG,aACrBC,EAAgB,IAAIC,SAAQ,SAAAC,GAChCb,EAAQc,KAAKP,EAASQ,QAAQ,SAACC,EAAGC,GAChCJ,EAAQI,4BAJqCA,mCAAAA,oBAOjDd,gBACEG,EACA,wCAAIW,2BAAAA,qBACFX,EAAME,QAAOC,cAAKF,EAASW,eAAWD,KAExCN,UACGM,IAEFE,MAAK,SAAAC,YACJd,EAAME,QAAOC,cAAKF,EAASc,iBAAaD,gBAEjC,WACPpB,EAAQI,mBAAmBG,EAASQ,eAS3BX,4BAJWF,GAC1BF,EAAQI,mBAAmBF,cChCfoB,EAAYpB,OACpBqB,EAAUrB,MAAWsB,aACpB,CACLd,IAAQa,SACRL,OAAWK,YACXR,OAAWQ,YACXF,SAAaE,wBCXDE,EAAyBC,YAC9BC,EACPzB,EACA0B,EACAC,8BACGZ,mCAAAA,wBAEGV,EAAWe,EAAYpB,SACtB,CACL,sCAAIe,2BAAAA,kBACFS,EAAYjB,WAAZiB,GAAiBnB,EAASQ,eAAWE,KAEvC,IAAIL,SAAQ,SAACC,EAASiB,OAChBpB,GAAM,EACNqB,GAAO,EAEXL,EAAYZ,KAAKP,EAASG,KAAK,kBAAOA,GAAM,KAC5CgB,EAAYrB,GAAGE,EAASW,QAAQ,SAACF,8BAAMC,mCAAAA,oBACrCW,eAAYX,MAEdS,EAAYZ,KAAKP,EAASc,UAAU,SAACL,OAC9Be,EAAM,CACTA,GAAO,EACPL,EAAYtB,mBAAmBG,EAASG,KACxCgB,EAAYtB,mBAAmBG,EAASW,mCAJDD,mCAAAA,oBAKvCJ,EAAQI,OAIZe,YAAW,WACJtB,GAAQqB,IACXA,GAAO,EACPL,EAAYtB,mBAAmBG,EAASG,KACxCgB,EAAYtB,mBAAmBG,EAASW,QACxCQ,EAAYtB,mBAAmBG,EAASc,UACxCS,EAAO,IAAIG,MAAM,oBAElBJ,GAEHH,EAAYjB,WAAZiB,GAAiBxB,EAASK,UAAaU,cAatC,CAAEU,kBAAAA,EAAmBO,gBAP1BhC,EACA0B,8BACGX,mCAAAA,2BAEIU,gBAAkBzB,EAAS0B,EAAU,YAASX,UChD5CjB,EAAUD,EAAqBoC,WAE/BT,EAAcD,EAAyBU"}