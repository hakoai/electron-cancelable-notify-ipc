{"version":3,"file":"electron-cancelable-notify-ipc.cjs.production.min.js","sources":["../src/lib/main.ts","../src/lib/index.ts","../src/lib/renderer.ts","../src/index.ts"],"sourcesContent":["import { IpcMain } from 'electron';\nimport { IpcMainEvent } from 'electron/main';\nimport { Channels } from '.';\n\nexport function makeIpcMainFunctions(ipcMain: IpcMain) {\n  function handle(\n    channel: string,\n    listener: (\n      event: IpcMainEvent,\n      notify: (...args: unknown[]) => void,\n      cancel: Promise<unknown>,\n      ...args: unknown[]\n    ) => Promise<unknown[]>,\n    onError: (e: unknown) => void\n  ) {\n    ipcMain.removeAllListeners(channel);\n    ipcMain.on(channel, (event, channels: Channels, ...args) => {\n      event.sender.send(channels.act);\n      const calcelPromise = new Promise(resolve => {\n        ipcMain.once(channels.cancel, (_, args) => {\n          resolve(args);\n        });\n      });\n      try {\n        listener(\n          event,\n          (...args) => {\n            event.sender.send(channels.notify, ...args);\n          },\n          calcelPromise,\n          ...args\n        )\n          .then(res => {\n            event.sender.send(channels.responce, ...res);\n          })\n          .catch(e => {\n            event.sender.send(channels.error, e);\n            onError(e);\n          })\n          .finally(() => {\n            ipcMain.removeAllListeners(channels.cancel);\n          });\n      } catch (e) {\n        ipcMain.removeAllListeners(channels.cancel);\n        event.sender.send(channels.error, e);\n        onError(e);\n      }\n    });\n  }\n\n  function removeAllListeners(channel: string) {\n    ipcMain.removeAllListeners(channel);\n  }\n\n  return { handle, removeAllListeners };\n}\n","import { v1 } from 'uuid';\nexport interface Channels {\n  act: string;\n  notify: string;\n  cancel: string;\n  responce: string;\n  error: string;\n}\n\nexport function makeChannel(channel: string): Channels {\n  const base = `${channel}-${v1()}`;\n  return {\n    act: `${base}-act`,\n    notify: `${base}-notify`,\n    cancel: `${base}-cancel`,\n    responce: `${base}-responce`,\n    error: `${base}-error`,\n  };\n}\n","import { IpcRenderer } from 'electron';\nimport { makeChannel } from '.';\n\nexport function makeIpcRendererFunctions(ipcRenderer: IpcRenderer) {\n  function invokeWithTimeOut(\n    channel: string,\n    onNotify: (...args: unknown[]) => void,\n    timeout: number,\n    ...args: unknown[]\n  ): [(...args: unknown[]) => void, Promise<unknown[]>] {\n    const channels = makeChannel(channel);\n    return [\n      (...args: unknown[]) => {\n        ipcRenderer.send(channels.cancel, ...args);\n      },\n      new Promise((resolve, reject) => {\n        let act = false;\n        let done = false;\n\n        ipcRenderer.once(channels.act, () => (act = true));\n        ipcRenderer.on(channels.notify, (_, ...args) => {\n          onNotify(...args);\n        });\n\n        ipcRenderer.once(channels.responce, (_, ...args) => {\n          if (!done) {\n            done = true;\n            ipcRenderer.removeAllListeners(channels.act);\n            ipcRenderer.removeAllListeners(channels.notify);\n            ipcRenderer.removeAllListeners(channels.error);\n            resolve(args);\n          }\n        });\n\n        ipcRenderer.once(channels.error, (_, e) => {\n          if (!done) {\n            done = true;\n            ipcRenderer.removeAllListeners(channels.act);\n            ipcRenderer.removeAllListeners(channels.notify);\n            ipcRenderer.removeAllListeners(channels.responce);\n            reject(e);\n          }\n        });\n\n        setTimeout(() => {\n          if (!act && !done) {\n            done = true;\n            ipcRenderer.removeAllListeners(channels.act);\n            ipcRenderer.removeAllListeners(channels.notify);\n            ipcRenderer.removeAllListeners(channels.responce);\n            ipcRenderer.removeAllListeners(channels.error);\n            reject(new Error('ipc act timeout.'));\n          }\n        }, timeout);\n\n        ipcRenderer.send(channel, channels, ...args);\n      }),\n    ];\n  }\n\n  function invoke(\n    channel: string,\n    onNotify: (...args: unknown[]) => void,\n    ...args: unknown[]\n  ) {\n    return invokeWithTimeOut(channel, onNotify, 1000, ...args);\n  }\n\n  return { invokeWithTimeOut, invoke };\n}\n","import { makeIpcMainFunctions } from './lib/main';\nimport * as electron from 'electron';\nimport { makeIpcRendererFunctions } from './lib/renderer';\n\nexport const ipcMain = makeIpcMainFunctions(electron.ipcMain);\n\nexport const ipcRenderer = makeIpcRendererFunctions(electron.ipcRenderer);\n"],"names":["makeIpcMainFunctions","ipcMain","handle","channel","listener","onError","removeAllListeners","on","event","channels","sender","send","act","calcelPromise","Promise","resolve","once","cancel","_","args","notify","then","res","responce","e","error","makeChannel","base","v1","makeIpcRendererFunctions","ipcRenderer","invokeWithTimeOut","onNotify","timeout","reject","done","setTimeout","Error","invoke","electron"],"mappings":"yHAIgBA,EAAqBC,SAkD5B,CAAEC,gBAhDPC,EACAC,EAMAC,GAEAJ,EAAQK,mBAAmBH,GAC3BF,EAAQM,GAAGJ,GAAS,SAACK,EAAOC,GAC1BD,EAAME,OAAOC,KAAKF,EAASG,SACrBC,EAAgB,IAAIC,SAAQ,SAAAC,GAChCd,EAAQe,KAAKP,EAASQ,QAAQ,SAACC,EAAGC,GAChCJ,EAAQI,wCAJqCA,mCAAAA,oBAQ/Cf,gBACEI,EACA,wCAAIW,2BAAAA,qBACFX,EAAME,QAAOC,cAAKF,EAASW,eAAWD,KAExCN,UACGM,IAEFE,MAAK,SAAAC,YACJd,EAAME,QAAOC,cAAKF,EAASc,iBAAaD,cAEnC,SAAAE,GACLhB,EAAME,OAAOC,KAAKF,EAASgB,MAAOD,GAClCnB,EAAQmB,eAED,WACPvB,EAAQK,mBAAmBG,EAASQ,WAExC,MAAOO,GACPvB,EAAQK,mBAAmBG,EAASQ,QACpCT,EAAME,OAAOC,KAAKF,EAASgB,MAAOD,GAClCnB,EAAQmB,QASGlB,4BAJWH,GAC1BF,EAAQK,mBAAmBH,cC1CfuB,EAAYvB,OACpBwB,EAAUxB,MAAWyB,aACpB,CACLhB,IAAQe,SACRP,OAAWO,YACXV,OAAWU,YACXJ,SAAaI,cACbF,MAAUE,qBCbEE,EAAyBC,YAC9BC,EACP5B,EACA6B,EACAC,8BACGd,mCAAAA,wBAEGV,EAAWiB,EAAYvB,SACtB,CACL,sCAAIgB,2BAAAA,kBACFW,EAAYnB,WAAZmB,GAAiBrB,EAASQ,eAAWE,KAEvC,IAAIL,SAAQ,SAACC,EAASmB,OAChBtB,GAAM,EACNuB,GAAO,EAEXL,EAAYd,KAAKP,EAASG,KAAK,kBAAOA,GAAM,KAC5CkB,EAAYvB,GAAGE,EAASW,QAAQ,SAACF,8BAAMC,mCAAAA,oBACrCa,eAAYb,MAGdW,EAAYd,KAAKP,EAASc,UAAU,SAACL,OAC9BiB,EAAM,CACTA,GAAO,EACPL,EAAYxB,mBAAmBG,EAASG,KACxCkB,EAAYxB,mBAAmBG,EAASW,QACxCU,EAAYxB,mBAAmBG,EAASgB,kCALDN,mCAAAA,oBAMvCJ,EAAQI,OAIZW,EAAYd,KAAKP,EAASgB,OAAO,SAACP,EAAGM,GAC9BW,IACHA,GAAO,EACPL,EAAYxB,mBAAmBG,EAASG,KACxCkB,EAAYxB,mBAAmBG,EAASW,QACxCU,EAAYxB,mBAAmBG,EAASc,UACxCW,EAAOV,OAIXY,YAAW,WACJxB,GAAQuB,IACXA,GAAO,EACPL,EAAYxB,mBAAmBG,EAASG,KACxCkB,EAAYxB,mBAAmBG,EAASW,QACxCU,EAAYxB,mBAAmBG,EAASc,UACxCO,EAAYxB,mBAAmBG,EAASgB,OACxCS,EAAO,IAAIG,MAAM,wBAElBJ,GAEHH,EAAYnB,WAAZmB,GAAiB3B,EAASM,UAAaU,cAatC,CAAEY,kBAAAA,EAAmBO,gBAP1BnC,EACA6B,8BACGb,mCAAAA,2BAEIY,gBAAkB5B,EAAS6B,EAAU,YAASb,UC7D5ClB,EAAUD,EAAqBuC,WAE/BT,EAAcD,EAAyBU"}